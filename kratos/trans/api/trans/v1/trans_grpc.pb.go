// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/trans/v1/trans.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransClient is the client API for Trans service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransClient interface {
	TransIn(ctx context.Context, in *AdjustInfo, opts ...grpc.CallOption) (*Response, error)
	TransOut(ctx context.Context, in *AdjustInfo, opts ...grpc.CallOption) (*Response, error)
}

type transClient struct {
	cc grpc.ClientConnInterface
}

func NewTransClient(cc grpc.ClientConnInterface) TransClient {
	return &transClient{cc}
}

func (c *transClient) TransIn(ctx context.Context, in *AdjustInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.trans.v1.Trans/TransIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transClient) TransOut(ctx context.Context, in *AdjustInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.trans.v1.Trans/TransOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransServer is the server API for Trans service.
// All implementations must embed UnimplementedTransServer
// for forward compatibility
type TransServer interface {
	TransIn(context.Context, *AdjustInfo) (*Response, error)
	TransOut(context.Context, *AdjustInfo) (*Response, error)
	mustEmbedUnimplementedTransServer()
}

// UnimplementedTransServer must be embedded to have forward compatible implementations.
type UnimplementedTransServer struct {
}

func (UnimplementedTransServer) TransIn(context.Context, *AdjustInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransIn not implemented")
}
func (UnimplementedTransServer) TransOut(context.Context, *AdjustInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOut not implemented")
}
func (UnimplementedTransServer) mustEmbedUnimplementedTransServer() {}

// UnsafeTransServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransServer will
// result in compilation errors.
type UnsafeTransServer interface {
	mustEmbedUnimplementedTransServer()
}

func RegisterTransServer(s grpc.ServiceRegistrar, srv TransServer) {
	s.RegisterService(&Trans_ServiceDesc, srv)
}

func _Trans_TransIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServer).TransIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trans.v1.Trans/TransIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServer).TransIn(ctx, req.(*AdjustInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trans_TransOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServer).TransOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trans.v1.Trans/TransOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServer).TransOut(ctx, req.(*AdjustInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Trans_ServiceDesc is the grpc.ServiceDesc for Trans service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trans_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.trans.v1.Trans",
	HandlerType: (*TransServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransIn",
			Handler:    _Trans_TransIn_Handler,
		},
		{
			MethodName: "TransOut",
			Handler:    _Trans_TransOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/trans/v1/trans.proto",
}
